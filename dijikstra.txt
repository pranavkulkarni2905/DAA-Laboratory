import java.util.Arrays;

public class NetworkDelayTime {

    public static int[] networkDelayTime(int[][] times, int N, int K) {
        final int MAX_VALUE = Integer.MAX_VALUE;

        // Create adjacency matrix
        int[][] graph = new int[N][N];
        for (int[] row : graph) {
            Arrays.fill(row, MAX_VALUE);
        }

        // Populate the graph with edge weights
        for (int[] time : times) {
            int u = time[0] - 1; // Adjust to 0-based indexing
            int v = time[1] - 1;
            int w = time[2];
            graph[u][v] = w;
        }

        // Distance array to store the minimum distance from source to each node
        int[] distance = new int[N];
        Arrays.fill(distance, MAX_VALUE);
        distance[K - 1] = 0; // Distance to source node is 0

        // Boolean array to track if a node is visited
        boolean[] visited = new boolean[N];

        // Dijkstra's algorithm
        for (int count = 0; count < N - 1; count++) {
            int u = minDistance(distance, visited);
            visited[u] = true;

            for (int v = 0; v < N; v++) {
                if (!visited[v] && graph[u][v] != MAX_VALUE && distance[u] != MAX_VALUE
                        && distance[u] + graph[u][v] < distance[v]) {
                    distance[v] = distance[u] + graph[u][v];
                }
            }
        }

        // Check if any node is unreachable
        for (int i = 0; i < N; i++) {
            if (!visited[i] && graph[K - 1][i] != MAX_VALUE) {
                distance[i] = -1; // Node is unreachable
            }
        }

        return distance;
    }

    private static int minDistance(int[] distance, boolean[] visited) {
        int min = Integer.MAX_VALUE;
        int minIndex = -1;

        for (int i = 0; i < distance.length; i++) {
            if (!visited[i] && distance[i] <= min) {
                min = distance[i];
                minIndex = i;
            }
        }

        return minIndex;
    }

    public static void main(String[] args) {
    	  int[][] times = {
    	            {1, 2, 1},
    	            {1, 3, 2},
    	            {1, 4, 3},
    	            {2, 3, 1},
    	            {2, 5, 4},
    	            {3, 4, 2},
    	            {3, 5, 3},
    	            {3, 6, 5},
    	            {4, 6, 2},
    	            {5, 6, 1}
    	        };
    	        int N = 6;
    	        int K = 1;

        int[] distances = networkDelayTime(times, N, K);

        for (int i = 0; i < distances.length; i++) {
            System.out.println("Shortest distance from node " + K + " to node " + (i + 1) + ": "
                    + (distances[i] == Integer.MAX_VALUE ? "Unreachable" : distances[i]));
        }
    }
}
